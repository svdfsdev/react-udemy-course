{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"M:\\\\React\\\\Udemy_Course\\\\react-udemy-course\\\\react-quiz\\\\src\\\\containers\\\\Quiz\\\\Quiz.jsx\";\nimport React, { Component } from 'react';\nimport axios from '../../axios/axios';\nimport classes from './Quiz.module.scss'; // import ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz';\n// import FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz';\n// import Loader from '../../components/UI/Loader/Loader';\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      results: {},\n      isFinished: false,\n      activeQuestion: 0,\n      answerState: null,\n      quiz: [],\n      loading: true\n    };\n\n    this.onAnswerClickHandler = answerId => {\n      const {\n        quiz,\n        activeQuestion,\n        results\n      } = this.state;\n      const question = quiz[activeQuestion];\n      const answer = question.rightAnswerId === answerId;\n\n      if (answer) {\n        if (!results[question.id]) {\n          results[question.id] = 'success';\n        }\n\n        this.setState({\n          answerState: {\n            [answerId]: 'success'\n          },\n          results: results\n        });\n        const timeout = window.setTimeout(() => {\n          if (this.isQuizFinished()) {\n            this.setState({\n              isFinished: true\n            });\n          } else {\n            this.setState({\n              activeQuestion: activeQuestion + 1,\n              answerState: null\n            });\n          }\n\n          window.clearTimeout(timeout);\n        }, 1000);\n      } else {\n        results[question.id] = 'error';\n        this.setState({\n          answerState: {\n            [answerId]: 'error'\n          },\n          results: results\n        });\n      }\n    };\n\n    this.isQuizFinished = () => {\n      const {\n        activeQuestion,\n        quiz\n      } = this.state;\n      return activeQuestion + 1 === quiz.length;\n    };\n\n    this.retryHandler = () => {\n      this.setState({\n        activeQuestion: 0,\n        answerState: null,\n        isFinished: false,\n        results: {}\n      });\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const response = await axios.get(`/quizes.json`);\n      const quiz = response.data;\n      console.log(response);\n      this.setState({\n        quiz,\n        loading: false\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    const {\n      quiz,\n      activeQuestion,\n      answerState,\n      isFinished,\n      results,\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Quiz,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.QuizWrapper,\n        children: !isFinished && /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Answer all questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["M:/React/Udemy_Course/react-udemy-course/react-quiz/src/containers/Quiz/Quiz.jsx"],"names":["React","Component","axios","classes","Quiz","state","results","isFinished","activeQuestion","answerState","quiz","loading","onAnswerClickHandler","answerId","question","answer","rightAnswerId","id","setState","timeout","window","setTimeout","isQuizFinished","clearTimeout","length","retryHandler","componentDidMount","response","get","data","console","log","error","render","QuizWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from '../../axios/axios';\r\nimport classes from './Quiz.module.scss';\r\n// import ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz';\r\n// import FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz';\r\n// import Loader from '../../components/UI/Loader/Loader';\r\n\r\nclass Quiz extends Component {\r\n  state = {\r\n    results: {},\r\n    isFinished: false,\r\n    activeQuestion: 0,\r\n    answerState: null,\r\n    quiz: [],\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const response = await axios.get(`/quizes.json`);\r\n      const quiz = response.data;\r\n\r\n      console.log(response);\r\n\r\n      this.setState({ quiz, loading: false });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  onAnswerClickHandler = (answerId) => {\r\n    const { quiz, activeQuestion, results } = this.state;\r\n    const question = quiz[activeQuestion];\r\n    const answer = question.rightAnswerId === answerId;\r\n\r\n    if (answer) {\r\n      if (!results[question.id]) {\r\n        results[question.id] = 'success';\r\n      }\r\n\r\n      this.setState({\r\n        answerState: { [answerId]: 'success' },\r\n        results: results,\r\n      });\r\n\r\n      const timeout = window.setTimeout(() => {\r\n        if (this.isQuizFinished()) {\r\n          this.setState({\r\n            isFinished: true,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            activeQuestion: activeQuestion + 1,\r\n            answerState: null,\r\n          });\r\n        }\r\n\r\n        window.clearTimeout(timeout);\r\n      }, 1000);\r\n    } else {\r\n      results[question.id] = 'error';\r\n\r\n      this.setState({\r\n        answerState: { [answerId]: 'error' },\r\n        results: results,\r\n      });\r\n    }\r\n  };\r\n\r\n  isQuizFinished = () => {\r\n    const { activeQuestion, quiz } = this.state;\r\n\r\n    return activeQuestion + 1 === quiz.length;\r\n  };\r\n\r\n  retryHandler = () => {\r\n    this.setState({\r\n      activeQuestion: 0,\r\n      answerState: null,\r\n      isFinished: false,\r\n      results: {},\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      quiz,\r\n      activeQuestion,\r\n      answerState,\r\n      isFinished,\r\n      results,\r\n      loading,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className={classes.Quiz}>\r\n        <div className={classes.QuizWrapper}>\r\n          {!isFinished && <h1>Answer all questions</h1>}\r\n\r\n          {/* {loading ? (\r\n            <Loader />\r\n          ) : isFinished ? (\r\n            <FinishedQuiz\r\n              results={results}\r\n              quiz={quiz}\r\n              onRetry={this.retryHandler}\r\n            />\r\n          ) : (\r\n            <ActiveQuiz\r\n              answers={quiz[activeQuestion].answers}\r\n              question={quiz[activeQuestion].question}\r\n              onAnswerClick={this.onAnswerClickHandler}\r\n              answerNumber={activeQuestion + 1}\r\n              quizLength={quiz.length}\r\n              answerState={answerState}\r\n            />\r\n          )} */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n"]},"metadata":{},"sourceType":"module"}