{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"M:\\\\React\\\\Udemy_Course\\\\react-udemy-course\\\\react-quiz\\\\src\\\\containers\\\\Auth\\\\Auth.jsx\";\nimport React, { Component } from 'react';\nimport classes from './Auth.module.scss';\nimport Button from './../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport axios from 'axios';\nimport { firebaseApiKey, firebaseAuthURL } from '../../helpers';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFormValid: false,\n      formControls: {\n        email: {\n          value: '',\n          type: 'email',\n          label: 'Email',\n          errorMessage: 'Input correct email',\n          valid: false,\n          touched: false,\n          validation: {\n            required: true,\n            email: true\n          }\n        },\n        password: {\n          value: '',\n          type: 'password',\n          label: 'Password',\n          errorMessage: 'Input correct password',\n          valid: false,\n          touched: false,\n          validation: {\n            required: true,\n            minLength: 6\n          }\n        }\n      }\n    };\n\n    this.loginHandler = () => {};\n\n    this.registerHandler = async () => {\n      const {\n        email\n      } = this.state;\n      const authUrl = firebaseAuthURL + firebaseApiKey;\n      const authData = {\n        email\n      };\n      axios.post(authUrl);\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n    };\n\n    this.validateControl = (value, validation) => {\n      if (!validation) {\n        return true;\n      }\n\n      let isValid = true;\n\n      if (validation.required) {\n        isValid = value.trim() && isValid;\n      }\n\n      if (validation.email) {\n        const regExpEmail = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\n        const validateEmail = regExpEmail.test(value.toLowerCase());\n        isValid = validateEmail && isValid;\n      }\n\n      if (validation.minLength) {\n        isValid = value.length >= validation.minLength && isValid;\n      }\n\n      return isValid;\n    };\n\n    this.onChangeHandler = (event, controlName) => {\n      const formControls = { ...this.state.formControls\n      };\n      const control = { ...formControls[controlName]\n      };\n      control.value = event.target.value;\n      control.touched = true;\n      control.valid = this.validateControl(control.value, control.validation);\n      formControls[controlName] = control;\n      let isFormValid = Object.values(formControls).reduce((isValid, control) => isValid && control.valid, true);\n      this.setState({\n        formControls,\n        isFormValid\n      });\n    };\n\n    this.renderInputs = () => {\n      const inputs = Object.keys(this.state.formControls).map((controlName, index) => {\n        const control = this.state.formControls[controlName];\n        return /*#__PURE__*/_jsxDEV(Input, {\n          type: control.type,\n          value: control.value,\n          valid: control.valid,\n          touched: control.touched,\n          label: control.label,\n          shouldValidate: !!control.validation,\n          errorMessage: control.errorMessage,\n          onChange: event => this.onChangeHandler(event, controlName)\n        }, controlName + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this);\n      });\n      return inputs;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Authorization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.submitHandler,\n          className: classes.AuthForm,\n          children: [this.renderInputs(), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"success\",\n              onClick: this.loginHandler,\n              disabled: !this.state.isFormValid,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              onClick: this.registerHandler,\n              disabled: !this.state.isFormValid,\n              children: \"register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["M:/React/Udemy_Course/react-udemy-course/react-quiz/src/containers/Auth/Auth.jsx"],"names":["React","Component","classes","Button","Input","axios","firebaseApiKey","firebaseAuthURL","Auth","state","isFormValid","formControls","email","value","type","label","errorMessage","valid","touched","validation","required","password","minLength","loginHandler","registerHandler","authUrl","authData","post","submitHandler","event","preventDefault","validateControl","isValid","trim","regExpEmail","validateEmail","test","toLowerCase","length","onChangeHandler","controlName","control","target","Object","values","reduce","setState","renderInputs","inputs","keys","map","index","render","AuthForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport classes from './Auth.module.scss';\r\nimport Button from './../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport axios from 'axios';\r\nimport { firebaseApiKey, firebaseAuthURL } from '../../helpers';\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    isFormValid: false,\r\n    formControls: {\r\n      email: {\r\n        value: '',\r\n        type: 'email',\r\n        label: 'Email',\r\n        errorMessage: 'Input correct email',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n          required: true,\r\n          email: true,\r\n        },\r\n      },\r\n      password: {\r\n        value: '',\r\n        type: 'password',\r\n        label: 'Password',\r\n        errorMessage: 'Input correct password',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  loginHandler = () => {};\r\n\r\n  registerHandler = async () => {\r\n    const {email} = this.state\r\n    const authUrl = firebaseAuthURL + firebaseApiKey;\r\n    const authData = {\r\n      email,\r\n    };\r\n\r\n    axios.post(authUrl);\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  validateControl = (value, validation) => {\r\n    if (!validation) {\r\n      return true;\r\n    }\r\n\r\n    let isValid = true;\r\n\r\n    if (validation.required) {\r\n      isValid = value.trim() && isValid;\r\n    }\r\n\r\n    if (validation.email) {\r\n      const regExpEmail = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\r\n      const validateEmail = regExpEmail.test(value.toLowerCase());\r\n\r\n      isValid = validateEmail && isValid;\r\n    }\r\n\r\n    if (validation.minLength) {\r\n      isValid = value.length >= validation.minLength && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  onChangeHandler = (event, controlName) => {\r\n    const formControls = { ...this.state.formControls };\r\n    const control = { ...formControls[controlName] };\r\n\r\n    control.value = event.target.value;\r\n    control.touched = true;\r\n    control.valid = this.validateControl(\r\n      control.value,\r\n      control.validation\r\n    );\r\n    formControls[controlName] = control;\r\n\r\n    let isFormValid = Object.values(formControls).reduce(\r\n      (isValid, control) => isValid && control.valid,\r\n      true\r\n    );\r\n\r\n    this.setState({\r\n      formControls,\r\n      isFormValid,\r\n    });\r\n  };\r\n\r\n  renderInputs = () => {\r\n    const inputs = Object.keys(this.state.formControls).map(\r\n      (controlName, index) => {\r\n        const control = this.state.formControls[controlName];\r\n\r\n        return (\r\n          <Input\r\n            key={controlName + index}\r\n            type={control.type}\r\n            value={control.value}\r\n            valid={control.valid}\r\n            touched={control.touched}\r\n            label={control.label}\r\n            shouldValidate={!!control.validation}\r\n            errorMessage={control.errorMessage}\r\n            onChange={(event) =>\r\n              this.onChangeHandler(event, controlName)\r\n            }\r\n          />\r\n        );\r\n      }\r\n    );\r\n\r\n    return inputs;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Auth}>\r\n        <div>\r\n          <h1>Authorization</h1>\r\n\r\n          <form\r\n            onSubmit={this.submitHandler}\r\n            className={classes.AuthForm}\r\n          >\r\n            {this.renderInputs()}\r\n            <div>\r\n              <Button\r\n                type=\"success\"\r\n                onClick={this.loginHandler}\r\n                disabled={!this.state.isFormValid}\r\n              >\r\n                Login\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={this.registerHandler}\r\n                disabled={!this.state.isFormValid}\r\n              >\r\n                register\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n"]},"metadata":{},"sourceType":"module"}