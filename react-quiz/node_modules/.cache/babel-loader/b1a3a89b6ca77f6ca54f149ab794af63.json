{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"M:\\\\React\\\\Udemy_Course\\\\react-udemy-course\\\\react-quiz\\\\src\\\\containers\\\\Quiz\\\\Quiz.jsx\";\nimport React, { Component } from 'react';\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz';\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz';\nimport classes from './Quiz.module.scss';\nimport axios from '../..';\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      results: {},\n      isFinished: false,\n      activeQuestion: 0,\n      answerState: null,\n      quiz: [{\n        id: 1,\n        question: 'What color is the sky?',\n        rightAnswerId: 2,\n        answers: [{\n          id: 1,\n          text: 'Black'\n        }, {\n          id: 2,\n          text: 'Blue'\n        }, {\n          id: 3,\n          text: 'Red'\n        }, {\n          id: 4,\n          text: 'Green'\n        }]\n      }, {\n        id: 2,\n        question: 'In what year was Saint Petersburg founded?',\n        rightAnswerId: 3,\n        answers: [{\n          id: 1,\n          text: '1700'\n        }, {\n          id: 2,\n          text: '1067'\n        }, {\n          id: 3,\n          text: '1703'\n        }, {\n          id: 4,\n          text: '1803'\n        }]\n      }]\n    };\n\n    this.onAnswerClickHandler = answerId => {\n      const {\n        quiz,\n        activeQuestion,\n        results\n      } = this.state;\n      const question = quiz[activeQuestion];\n      const answer = question.rightAnswerId === answerId;\n\n      if (answer) {\n        if (!results[question.id]) {\n          results[question.id] = 'success';\n        }\n\n        this.setState({\n          answerState: {\n            [answerId]: 'success'\n          },\n          results: results\n        });\n        const timeout = window.setTimeout(() => {\n          if (this.isQuizFinished()) {\n            this.setState({\n              isFinished: true\n            });\n          } else {\n            this.setState({\n              activeQuestion: activeQuestion + 1,\n              answerState: null\n            });\n          }\n\n          window.clearTimeout(timeout);\n        }, 1000);\n      } else {\n        results[question.id] = 'error';\n        this.setState({\n          answerState: {\n            [answerId]: 'error'\n          },\n          results: results\n        });\n      }\n    };\n\n    this.isQuizFinished = () => {\n      const {\n        activeQuestion,\n        quiz\n      } = this.state;\n      return activeQuestion + 1 === quiz.length;\n    };\n\n    this.retryHandler = () => {\n      this.setState({\n        activeQuestion: 0,\n        answerState: null,\n        isFinished: false,\n        results: {}\n      });\n    };\n  }\n\n  componentDidMount() {// console.log(`Quiz ID = ${this.props.match.params.id}`);\n  }\n\n  render() {\n    const {\n      quiz,\n      activeQuestion,\n      answerState,\n      isFinished,\n      results\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Quiz,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.QuizWrapper,\n        children: [!isFinished && /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Answer all questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 27\n        }, this), isFinished ? /*#__PURE__*/_jsxDEV(FinishedQuiz, {\n          results: results,\n          quiz: quiz,\n          onRetry: this.retryHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ActiveQuiz, {\n          answers: quiz[activeQuestion].answers,\n          question: quiz[activeQuestion].question,\n          onAnswerClick: this.onAnswerClickHandler,\n          answerNumber: activeQuestion + 1,\n          quizLength: quiz.length,\n          answerState: answerState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["M:/React/Udemy_Course/react-udemy-course/react-quiz/src/containers/Quiz/Quiz.jsx"],"names":["React","Component","ActiveQuiz","FinishedQuiz","classes","axios","Quiz","state","results","isFinished","activeQuestion","answerState","quiz","id","question","rightAnswerId","answers","text","onAnswerClickHandler","answerId","answer","setState","timeout","window","setTimeout","isQuizFinished","clearTimeout","length","retryHandler","componentDidMount","render","QuizWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz';\r\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz';\r\nimport classes from './Quiz.module.scss';\r\nimport axios from '../..';\r\n\r\nclass Quiz extends Component {\r\n  state = {\r\n    results: {},\r\n    isFinished: false,\r\n    activeQuestion: 0,\r\n    answerState: null,\r\n    quiz: [\r\n      {\r\n        id: 1,\r\n        question: 'What color is the sky?',\r\n        rightAnswerId: 2,\r\n        answers: [\r\n          { id: 1, text: 'Black' },\r\n          { id: 2, text: 'Blue' },\r\n          { id: 3, text: 'Red' },\r\n          { id: 4, text: 'Green' },\r\n        ],\r\n      },\r\n\r\n      {\r\n        id: 2,\r\n        question: 'In what year was Saint Petersburg founded?',\r\n        rightAnswerId: 3,\r\n        answers: [\r\n          { id: 1, text: '1700' },\r\n          { id: 2, text: '1067' },\r\n          { id: 3, text: '1703' },\r\n          { id: 4, text: '1803' },\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    // console.log(`Quiz ID = ${this.props.match.params.id}`);\r\n  }\r\n\r\n  onAnswerClickHandler = (answerId) => {\r\n    const { quiz, activeQuestion, results } = this.state;\r\n    const question = quiz[activeQuestion];\r\n    const answer = question.rightAnswerId === answerId;\r\n\r\n    if (answer) {\r\n      if (!results[question.id]) {\r\n        results[question.id] = 'success';\r\n      }\r\n\r\n      this.setState({\r\n        answerState: { [answerId]: 'success' },\r\n        results: results,\r\n      });\r\n\r\n      const timeout = window.setTimeout(() => {\r\n        if (this.isQuizFinished()) {\r\n          this.setState({\r\n            isFinished: true,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            activeQuestion: activeQuestion + 1,\r\n            answerState: null,\r\n          });\r\n        }\r\n\r\n        window.clearTimeout(timeout);\r\n      }, 1000);\r\n    } else {\r\n      results[question.id] = 'error';\r\n\r\n      this.setState({\r\n        answerState: { [answerId]: 'error' },\r\n        results: results,\r\n      });\r\n    }\r\n  };\r\n\r\n  isQuizFinished = () => {\r\n    const { activeQuestion, quiz } = this.state;\r\n\r\n    return activeQuestion + 1 === quiz.length;\r\n  };\r\n\r\n  retryHandler = () => {\r\n    this.setState({\r\n      activeQuestion: 0,\r\n      answerState: null,\r\n      isFinished: false,\r\n      results: {},\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      quiz,\r\n      activeQuestion,\r\n      answerState,\r\n      isFinished,\r\n      results,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className={classes.Quiz}>\r\n        <div className={classes.QuizWrapper}>\r\n          {!isFinished && <h1>Answer all questions</h1>}\r\n\r\n          {isFinished ? (\r\n            <FinishedQuiz\r\n              results={results}\r\n              quiz={quiz}\r\n              onRetry={this.retryHandler}\r\n            />\r\n          ) : (\r\n            <ActiveQuiz\r\n              answers={quiz[activeQuestion].answers}\r\n              question={quiz[activeQuestion].question}\r\n              onAnswerClick={this.onAnswerClickHandler}\r\n              answerNumber={activeQuestion + 1}\r\n              quizLength={quiz.length}\r\n              answerState={answerState}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n"]},"metadata":{},"sourceType":"module"}