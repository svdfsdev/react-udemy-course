{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"M:\\\\React\\\\Udemy_Course\\\\react-udemy-course\\\\react-quiz\\\\src\\\\containers\\\\QuizCreater\\\\QuizCreater.jsx\";\nimport React, { Component } from 'react';\nimport classes from './QuizCreater.module.scss';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport { createControl, validate, validateForm } from '../../formFramework/formFramework';\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary';\nimport Select from '../../components/UI/Select/Select';\nimport axios from 'axios';\nimport { firebaseURL } from '../../helpers';\n\nconst createOptionControl = number => {\n  return createControl({\n    id: number,\n    label: `Option ${number}`,\n    errorMessage: 'Answer can not be empty'\n  }, {\n    required: true\n  });\n};\n\nconst createFormInputs = () => {\n  return {\n    question: createControl({\n      label: 'Input question',\n      errorMessage: 'Question can not be empty'\n    }, {\n      required: true\n    }),\n    option1: createOptionControl(1),\n    option2: createOptionControl(2),\n    option3: createOptionControl(3),\n    option4: createOptionControl(4)\n  };\n};\n\nclass QuizCreater extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      quiz: [],\n      isFormValid: false,\n      rightAnswerId: 1,\n      formInputs: createFormInputs()\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n    };\n\n    this.addQuestionHandler = async event => {\n      event.preventDefault();\n      const quiz = this.state.quiz.concat();\n      const index = quiz.length + 1;\n      const {\n        question,\n        option1,\n        option2,\n        option3,\n        option4\n      } = this.state.formInputs;\n      const questionItem = {\n        id: index,\n        question: question.value,\n        rightAnswerId: this.state.rightAnswerId,\n        answers: [{\n          id: option1.id,\n          text: option1.value\n        }, {\n          id: option2.id,\n          text: option2.value\n        }, {\n          id: option3.id,\n          text: option3.value\n        }, {\n          id: option4.id,\n          text: option4.value\n        }]\n      };\n      quiz.push(questionItem);\n      await this.setState({\n        quiz,\n        isFormValid: false,\n        rightAnswerId: 1,\n        formInputs: createFormInputs()\n      });\n    };\n\n    this.createQuizHandler = async event => {\n      event.preventDefault();\n\n      try {\n        await axios.post('', this.state.quiz);\n        this.setState({\n          quiz: [],\n          isFormValid: false,\n          rightAnswerId: 1,\n          formInputs: createFormInputs()\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.changeHandler = (value, inputName) => {\n      const formInputs = { ...this.state.formInputs\n      };\n      const input = { ...formInputs[inputName]\n      };\n      input.touched = true;\n      input.value = value;\n      input.valid = validate(input.value, input.validation);\n      formInputs[inputName] = input;\n      this.setState({\n        formInputs,\n        isFormValid: validateForm(formInputs)\n      });\n    };\n\n    this.renderInputs = () => {\n      return Object.keys(this.state.formInputs).map((inputName, index) => {\n        const input = this.state.formInputs[inputName];\n        return /*#__PURE__*/_jsxDEV(Auxiliary, {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            label: input.label,\n            value: input.value,\n            valid: input.valid,\n            shouldValidate: !!input.validation,\n            touched: input.touched,\n            errorMessage: input.errorMessage,\n            onChange: event => this.changeHandler(event.target.value, inputName)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), !index && /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 24\n          }, this)]\n        }, inputName + index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this);\n      });\n    };\n\n    this.selectChangeHandler = event => {\n      this.setState({\n        rightAnswerId: +event.target.value\n      });\n    };\n  }\n\n  render() {\n    const select = /*#__PURE__*/_jsxDEV(Select, {\n      label: \"Select right answer\",\n      value: this.state.rightAnswerId,\n      onChange: this.selectChangeHandler,\n      options: [{\n        text: '1',\n        value: 1\n      }, {\n        text: '2',\n        value: 2\n      }, {\n        text: '3',\n        value: 3\n      }, {\n        text: '4',\n        value: 4\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.QuizCreater,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Create test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.submitHandler,\n          children: [this.renderInputs(), select, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              onClick: this.addQuestionHandler,\n              disabled: !this.state.isFormValid,\n              children: \"Add question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"success\",\n              onClick: this.createQuizHandler,\n              disabled: !this.state.quiz.length,\n              children: \"Create test\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default QuizCreater;","map":{"version":3,"sources":["M:/React/Udemy_Course/react-udemy-course/react-quiz/src/containers/QuizCreater/QuizCreater.jsx"],"names":["React","Component","classes","Button","Input","createControl","validate","validateForm","Auxiliary","Select","axios","firebaseURL","createOptionControl","number","id","label","errorMessage","required","createFormInputs","question","option1","option2","option3","option4","QuizCreater","state","quiz","isFormValid","rightAnswerId","formInputs","submitHandler","event","preventDefault","addQuestionHandler","concat","index","length","questionItem","value","answers","text","push","setState","createQuizHandler","post","error","console","log","changeHandler","inputName","input","touched","valid","validation","renderInputs","Object","keys","map","target","selectChangeHandler","render","select"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport classes from './QuizCreater.module.scss';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport {\r\n  createControl,\r\n  validate,\r\n  validateForm,\r\n} from '../../formFramework/formFramework';\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary';\r\nimport Select from '../../components/UI/Select/Select';\r\nimport axios from 'axios';\r\nimport { firebaseURL } from '../../helpers';\r\n\r\nconst createOptionControl = (number) => {\r\n  return createControl(\r\n    {\r\n      id: number,\r\n      label: `Option ${number}`,\r\n      errorMessage: 'Answer can not be empty',\r\n    },\r\n    { required: true }\r\n  );\r\n};\r\n\r\nconst createFormInputs = () => {\r\n  return {\r\n    question: createControl(\r\n      {\r\n        label: 'Input question',\r\n        errorMessage: 'Question can not be empty',\r\n      },\r\n      { required: true }\r\n    ),\r\n    option1: createOptionControl(1),\r\n    option2: createOptionControl(2),\r\n    option3: createOptionControl(3),\r\n    option4: createOptionControl(4),\r\n  };\r\n};\r\n\r\nclass QuizCreater extends Component {\r\n  state = {\r\n    quiz: [],\r\n    isFormValid: false,\r\n    rightAnswerId: 1,\r\n    formInputs: createFormInputs(),\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  addQuestionHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const quiz = this.state.quiz.concat();\r\n    const index = quiz.length + 1;\r\n\r\n    const {\r\n      question,\r\n      option1,\r\n      option2,\r\n      option3,\r\n      option4,\r\n    } = this.state.formInputs;\r\n\r\n    const questionItem = {\r\n      id: index,\r\n      question: question.value,\r\n      rightAnswerId: this.state.rightAnswerId,\r\n      answers: [\r\n        { id: option1.id, text: option1.value },\r\n        { id: option2.id, text: option2.value },\r\n        { id: option3.id, text: option3.value },\r\n        { id: option4.id, text: option4.value },\r\n      ],\r\n    };\r\n\r\n    quiz.push(questionItem);\r\n\r\n    await this.setState({\r\n      quiz,\r\n      isFormValid: false,\r\n      rightAnswerId: 1,\r\n      formInputs: createFormInputs(),\r\n    });\r\n  };\r\n\r\n  createQuizHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      await axios.post('', this.state.quiz);\r\n\r\n      this.setState({\r\n        quiz: [],\r\n        isFormValid: false,\r\n        rightAnswerId: 1,\r\n        formInputs: createFormInputs(),\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  changeHandler = (value, inputName) => {\r\n    const formInputs = { ...this.state.formInputs };\r\n    const input = { ...formInputs[inputName] };\r\n\r\n    input.touched = true;\r\n    input.value = value;\r\n\r\n    input.valid = validate(input.value, input.validation);\r\n\r\n    formInputs[inputName] = input;\r\n\r\n    this.setState({\r\n      formInputs,\r\n      isFormValid: validateForm(formInputs),\r\n    });\r\n  };\r\n\r\n  renderInputs = () => {\r\n    return Object.keys(this.state.formInputs).map(\r\n      (inputName, index) => {\r\n        const input = this.state.formInputs[inputName];\r\n\r\n        return (\r\n          <Auxiliary key={inputName + index}>\r\n            <Input\r\n              label={input.label}\r\n              value={input.value}\r\n              valid={input.valid}\r\n              shouldValidate={!!input.validation}\r\n              touched={input.touched}\r\n              errorMessage={input.errorMessage}\r\n              onChange={(event) =>\r\n                this.changeHandler(event.target.value, inputName)\r\n              }\r\n            />\r\n            {!index && <hr />}\r\n          </Auxiliary>\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  selectChangeHandler = (event) => {\r\n    this.setState({ rightAnswerId: +event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const select = (\r\n      <Select\r\n        label=\"Select right answer\"\r\n        value={this.state.rightAnswerId}\r\n        onChange={this.selectChangeHandler}\r\n        options={[\r\n          { text: '1', value: 1 },\r\n          { text: '2', value: 2 },\r\n          { text: '3', value: 3 },\r\n          { text: '4', value: 4 },\r\n        ]}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <div className={classes.QuizCreater}>\r\n        <div>\r\n          <h1>Create test</h1>\r\n          <form onSubmit={this.submitHandler}>\r\n            {this.renderInputs()}\r\n\r\n            {select}\r\n\r\n            <div>\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={this.addQuestionHandler}\r\n                disabled={!this.state.isFormValid}\r\n              >\r\n                Add question\r\n              </Button>\r\n              <Button\r\n                type=\"success\"\r\n                onClick={this.createQuizHandler}\r\n                disabled={!this.state.quiz.length}\r\n              >\r\n                Create test\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizCreater;\r\n"]},"metadata":{},"sourceType":"module"}